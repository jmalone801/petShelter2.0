{"ast":null,"code":"const api = require('./api');\n\nconst {\n  isEmpty,\n  isNumber\n} = require('../utils');\n\nconst Search = class Search {\n  constructor() {\n    this.query_hash = {\n      sort_by: [],\n      aggregate: [],\n      with_field: []\n    };\n  }\n\n  static instance() {\n    return new Search();\n  }\n\n  static expression(value) {\n    return this.instance().expression(value);\n  }\n\n  static max_results(value) {\n    return this.instance().max_results(value);\n  }\n\n  static next_cursor(value) {\n    return this.instance().next_cursor(value);\n  }\n\n  static aggregate(value) {\n    return this.instance().aggregate(value);\n  }\n\n  static with_field(value) {\n    return this.instance().with_field(value);\n  }\n\n  static sort_by(field_name) {\n    let dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';\n    return this.instance().sort_by(field_name, dir);\n  }\n\n  expression(value) {\n    this.query_hash.expression = value;\n    return this;\n  }\n\n  max_results(value) {\n    this.query_hash.max_results = value;\n    return this;\n  }\n\n  next_cursor(value) {\n    this.query_hash.next_cursor = value;\n    return this;\n  }\n\n  aggregate(value) {\n    const found = this.query_hash.aggregate.find(v => v === value);\n\n    if (!found) {\n      this.query_hash.aggregate.push(value);\n    }\n\n    return this;\n  }\n\n  with_field(value) {\n    const found = this.query_hash.with_field.find(v => v === value);\n\n    if (!found) {\n      this.query_hash.with_field.push(value);\n    }\n\n    return this;\n  }\n\n  sort_by(field_name) {\n    let dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"desc\";\n    let sort_bucket;\n    sort_bucket = {};\n    sort_bucket[field_name] = dir; // Check if this field name is already stored in the hash\n\n    const previously_sorted_obj = this.query_hash.sort_by.find(sort_by => sort_by[field_name]); // Since objects are references in Javascript, we can update the reference we found\n    // For example,\n\n    if (previously_sorted_obj) {\n      previously_sorted_obj[field_name] = dir;\n    } else {\n      this.query_hash.sort_by.push(sort_bucket);\n    }\n\n    return this;\n  }\n\n  to_query() {\n    Object.keys(this.query_hash).forEach(k => {\n      let v = this.query_hash[k];\n\n      if (!isNumber(v) && isEmpty(v)) {\n        delete this.query_hash[k];\n      }\n    });\n    return this.query_hash;\n  }\n\n  execute(options, callback) {\n    if (callback === null) {\n      callback = options;\n    }\n\n    options = options || {};\n    return api.search(this.to_query(), options, callback);\n  }\n\n};\nmodule.exports = Search;","map":{"version":3,"sources":["/Users/jamesmalone/Documents/Coding Stuff/Personal Projects/petShelter/client/node_modules/cloudinary/lib/v2/search.js"],"names":["api","require","isEmpty","isNumber","Search","constructor","query_hash","sort_by","aggregate","with_field","instance","expression","value","max_results","next_cursor","field_name","dir","found","find","v","push","sort_bucket","previously_sorted_obj","to_query","Object","keys","forEach","k","execute","options","callback","search","module","exports"],"mappings":"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","sourcesContent":["const api = require('./api');\nconst {isEmpty, isNumber} = require('../utils');\n\nconst Search = class Search {\n  constructor() {\n    this.query_hash = {\n      sort_by: [],\n      aggregate: [],\n      with_field: []\n    };\n  }\n\n  static instance() {\n    return new Search();\n  }\n\n  static expression(value) {\n    return this.instance().expression(value);\n  }\n\n  static max_results(value) {\n    return this.instance().max_results(value);\n  }\n\n  static next_cursor(value) {\n    return this.instance().next_cursor(value);\n  }\n\n  static aggregate(value) {\n    return this.instance().aggregate(value);\n  }\n\n  static with_field(value) {\n    return this.instance().with_field(value);\n  }\n\n  static sort_by(field_name, dir = 'asc') {\n    return this.instance().sort_by(field_name, dir);\n  }\n\n  expression(value) {\n    this.query_hash.expression = value;\n    return this;\n  }\n\n  max_results(value) {\n    this.query_hash.max_results = value;\n    return this;\n  }\n\n  next_cursor(value) {\n    this.query_hash.next_cursor = value;\n    return this;\n  }\n\n  aggregate(value) {\n    const found = this.query_hash.aggregate.find(v => v === value);\n\n    if (!found) {\n      this.query_hash.aggregate.push(value);\n    }\n\n    return this;\n  }\n\n  with_field(value) {\n    const found = this.query_hash.with_field.find(v => v === value);\n\n    if (!found) {\n      this.query_hash.with_field.push(value);\n    }\n\n    return this;\n  }\n\n  sort_by(field_name, dir = \"desc\") {\n    let sort_bucket;\n    sort_bucket = {};\n    sort_bucket[field_name] = dir;\n\n    // Check if this field name is already stored in the hash\n    const previously_sorted_obj = this.query_hash.sort_by.find((sort_by) => sort_by[field_name]);\n\n    // Since objects are references in Javascript, we can update the reference we found\n    // For example,\n    if (previously_sorted_obj) {\n      previously_sorted_obj[field_name] = dir;\n    } else {\n      this.query_hash.sort_by.push(sort_bucket);\n    }\n\n    return this;\n  }\n\n  to_query() {\n    Object.keys(this.query_hash).forEach((k) => {\n      let v = this.query_hash[k];\n      if (!isNumber(v) && isEmpty(v)) {\n        delete this.query_hash[k];\n      }\n    });\n    return this.query_hash;\n  }\n\n  execute(options, callback) {\n    if (callback === null) {\n      callback = options;\n    }\n    options = options || {};\n    return api.search(this.to_query(), options, callback);\n  }\n};\n\nmodule.exports = Search;\n"]},"metadata":{},"sourceType":"script"}